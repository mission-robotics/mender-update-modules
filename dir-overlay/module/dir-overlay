#!/bin/sh

set -e
set -x

STATE="$1"
FILES="$2"


mender_root_dir=${MENDER_ROOT_DIR:-""}
backup_dir="$FILES"/tmp
dest_dir_file="$FILES"/files/dest_dir
manifest_file_from_deployment="$FILES"/files/manifest
update_files_tar="$FILES"/files/update.tar


state_dir="${mender_root_dir}/var/lib/mender/dir-overlay-install"
manifest_file="$state_dir/manifest"
manifest_file_prev="$state_dir/manifest.prev"
prev_files_tar="$state_dir/backup.tar"


# Summary of module implementation
#
# NOTE! This module stores state in /var/lib/mender
#
# In ArtifactInstall state:
#
# If a manifest file exists, which means that there has been a previous
# successful deployment with this module:
#
#    1. Create a backup of current deployment, the manifest file
#       is parsed to determinate which files where installed on last successful
#       deployment.
#
#    2. The current deployment is removed from the system, the manifest file
#       is parsed to determinate which files where installed on last
#       successful deployment.
#
#    3. Mark the current manifest file as previous (manifest.prev), note at
#       this stage there is currently no active manifest. It can be restored
#       in two ways. Either a roll-back is performed or deployment in progress
#       finishes successfully.
#
#    4. Unpack/install content
#
# If manifest file does not exist, which means no previous deploy:
#
#      1. Unpack/install content
#
# In ArtifactCommit state:
#
# 1. Restore the "current manifest" file based on the manifest that is part of
#    the deployment
#

mount_root_rw() {
   if [ -n "$MENDER_INSTALL_NO_REMOUNT" ]; then 
        return 0
    fi
 
    mount_options=$(findmnt -n -o OPTIONS /)
    if [[ $mount_options == rw,* ]]; then
        echo "Rootfs is already mounted read-write." 
        return 0
    fi

    root_device=$(findmnt -n -o SOURCE /)
    mount -o remount,rw ${root_device} /
    mount_options=$(findmnt -n -o OPTIONS /)
    if [[ $mount_options == ro,* ]]; then
        echo "Rootfs ${root_device} could not be mounted as read-write. Aborting..." >&2
        exit 1
    fi
    return 0
}

mount_root_ro() {
    if [ -n "$MENDER_INSTALL_NO_REMOUNT" ]; then 
        return 0
    fi
 
    root_device=$(findmnt -n -o SOURCE /)
    mount -o remount,rw ${root_device} /
}


[ -n "${UID}" ] || UID=$(id -u)

case "$STATE" in

    NeedsArtifactReboot)
        echo "No"
    ;;

    SupportsRollback)
        echo "Yes"
    ;;

    ArtifactInstall)
        if [ $UID -ne 0 ] ; then
            echo "This update module must be run by a superuser. Aborting..."
            exit 1
        fi

        mount_root_rw
        
        dest_dir=${mender_root_dir}$(cat $dest_dir_file)

        mkdir -p $dest_dir $state_dir

        if [ -e $manifest_file ]; then
            mkdir -p $backup_dir

            # Copy permissions and ownership from destination directory
            chmod $(stat -c %a $dest_dir) $backup_dir
            chown $(stat -c "%u:%g" $dest_dir) $backup_dir

            for file in $(cat $manifest_file); do
                tar -cpf - $dest_dir/$file | (cd $backup_dir/ && tar -xpf -)
            done
            tar -cpf ${prev_files_tar} -C ${backup_dir} .

            for file in $(cat $manifest_file); do
                rm $dest_dir/$file
            done

            mv $manifest_file $manifest_file_prev
        fi

        mkdir -p ${dest_dir}
        tar -xpf ${update_files_tar} -C ${dest_dir}
        sync
        mount_root_ro
        ;;

    ArtifactCommit)
        if [ $UID -ne 0 ] ; then
            echo "This update module must be run by a superuser. Aborting..."
            exit 1
        fi
        mount_root_rw
        mv $manifest_file_from_deployment $manifest_file
        mount_root_ro
        ;;

    ArtifactRollback)
        if [ $UID -ne 0 ] ; then
            echo "This update module must be run by a superuser. Aborting..."
            exit 1
        fi

        test -f $prev_files_tar || exit 0

        dest_dir=${mender_root_dir}$(cat $dest_dir_file)

        mount_root_rw
        cp $manifest_file_prev $manifest_file
        tar -xpf ${prev_files_tar} -C ${dest_dir}
        mount_root_ro
        ;;
esac

exit 0
